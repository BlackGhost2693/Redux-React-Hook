// Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved

import {Context} from 'react';
import {Action, Dispatch, Store} from 'redux';

/**
 * To use redux-react-hook with stronger type safety, or to use with multiple
 * stores in the same app, create() your own instance and re-export the returned
 * functions.
 */
declare export function create<
  TState,
  TAction: Action,
  TStore: Store<TState, TAction>
>(): {
  StoreContext: React.Context<TStore | null>;
  useMappedState: <TResult>(mapState: (state: TState) => TResult) => TResult;
  useDispatch: () => Dispatch<TAction>;
};

declare export var StoreContext: Context<any>;
declare export function useDispatch(): Dispatch<any>;

/**
 * Your passed in mapState function should be memoized with useCallback to avoid
 * resubscribing every render. If you don't use other props in mapState, pass
 * an empty array [] as the dependency list so the callback isn't recreated
 * every render.
 *
 * const todo = useMappedState(useCallback(
 *   state => state.todos.get(id),
 *   [id],
 * ));
 */
declare export function useMappedState<TResult>(
  mapState: (state: any) => TResult,
): TResult;
