/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @flow strict-local
 */

import type {Context} from 'react';
import type {Dispatch, Store} from 'redux';

// This comes straight from the Redux types.
// flowlint-next-line unclear-type: off
type ActionType = { +type: string & any };

/**
 * To use redux-react-hook with stronger type safety, or to use with multiple
 * stores in the same app, create() your own instance and re-export the returned
 * functions.
 */
declare export function create<
  TState,
  TAction: ActionType,
  TDispatch,
  TStore: Store<TState, TAction, TDispatch>,
>(): {|
  +StoreContext: Context<?TStore>;
  +useMappedState: <TResult>(mapState: (state: TState) => TResult) => TResult;
  +useDispatch: () => TDispatch;
|};

// This is a module variable, so it cannot be typed generic.
// flowlint-next-line unclear-type: off
declare export var StoreContext: Context<any>;

declare export function useDispatch<TDispatch>(): TDispatch;

/**
 * Your passed in mapState function should be memoized with useCallback to avoid
 * resubscribing every render. If you don't use other props in mapState, pass
 * an empty array [] as the dependency list so the callback isn't recreated
 * every render.
 *
 * const todo = useMappedState(useCallback(
 *   state => state.todos.get(id),
 *   [id],
 * ));
 */
declare export function useMappedState<TState, TResult>(
  mapState: (state: TState) => TResult,
): TResult;
